/*
 *  I3InkShield.ino - Basic InkShield text sketch
 *  Copyright 2011, Nicholas C Lewis, GNU Lesser General Public License
 *  http://nicholasclewis.com/inkshield/
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *  http://www.gnu.org/licenses/lgpl-2.1.html
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
#include "fastio.h"

#ifndef CRITICAL_SECTION_START
  #define CRITICAL_SECTION_START unsigned char _sreg = SREG; cli();
  #define CRITICAL_SECTION_END SREG = _sreg;
#endif //CRITICAL_SECTION_START

#define INK_PINA 7
#define INK_PINB 6
#define INK_PINC 5
#define INK_PIND 4
#define INK_PULSE 2

//initialize data (font) table - each letter is 12 rows
const int rowsPerChar = 12;

//table is 14 letters long
const int numOfChar = 14;
const int fontSize = numOfChar*rowsPerChar;

//"I <3 InkShield" stored in an array
const uint16_t font[fontSize] = {
// 'I'
0b0000000000000000,
0b0000000000000000,
0b0000110000000011,
0b0000110000000011,
0b0000110000000011,
0b0000111111111111,
0b0000111111111111,
0b0000110000000011,
0b0000110000000011,
0b0000110000000011,
0b0000000000000000,
0b0000000000000000,
// 'Space'
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
// '<'
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000001000000,
0b0000000011100000,
0b0000000110110000,
0b0000001100011000,
0b0000011000001100,
0b0000010000000100,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
// '3'
0b0000000000000000,
0b0000001000000100,
0b0000011000000110,
0b0000110000000011,
0b0000110001100011,
0b0000100001100001,
0b0000100001100001,
0b0000110011110011,
0b0000110011110011,
0b0000011110011110,
0b0000001100001100,
0b0000000000000000,
// 'Space'
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
// 'I'
0b0000000000000000,
0b0000000000000000,
0b0000110000000011,
0b0000110000000011,
0b0000110000000011,
0b0000111111111111,
0b0000111111111111,
0b0000110000000011,
0b0000110000000011,
0b0000110000000011,
0b0000000000000000,
0b0000000000000000,
// 'n'
0b0000000000000000,
0b0000000111111111,
0b0000000111111111,
0b0000000011000000,
0b0000000010000000,
0b0000000110000000,
0b0000000110000000,
0b0000000110000000,
0b0000000110000000,
0b0000000011111111,
0b0000000001111111,
0b0000000000000000,
// 'k'
0b0000000000000000,
0b0000111111111111,
0b0000111111111111,
0b0000000000100000,
0b0000000001100000,
0b0000000011110000,
0b0000000110011000,
0b0000000100001100,
0b0000000000000110,
0b0000000000000011,
0b0000000000000001,
0b0000000000000000,

// 'S'
0b0000000000000000,
0b0000001100001100,
0b0000011110001110,
0b0000010011000010,
0b0000110011000011,
0b0000100001100001,
0b0000100001100001,
0b0000110000110011,
0b0000010000110010,
0b0000011100011110,
0b0000001100001100,
0b0000000000000000,
// 'h'
0b0000000000000000,
0b0000111111111111,
0b0000111111111111,
0b0000000011000000,
0b0000000110000000,
0b0000000110000000,
0b0000000110000000,
0b0000000110000000,
0b0000000110000000,
0b0000000011111111,
0b0000000001111111,
0b0000000000000000,
// 'i'
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000011,
0b0000110011111111,
0b0000110111111111,
0b0000000000000011,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
// 'e'
0b0000000000000000,
0b0000000001111100,
0b0000000011111110,
0b0000000110110011,
0b0000000110110011,
0b0000000110110011,
0b0000000110110011,
0b0000000110110011,
0b0000000110110011,
0b0000000111110110,
0b0000000011100100,
0b0000000000000000,
// 'l'
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000111111111111,
0b0000111111111111,
0b0000000000000011,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
// 'd'
0b0000000000000000,
0b0000000001111100,
0b0000000011111110,
0b0000000110000011,
0b0000000110000011,
0b0000000110000011,
0b0000000110000011,
0b0000000110000011,
0b0000000110000011,
0b0000111111111111,
0b0000111111111111,
0b0000000000000000,

};

//initialize shield on pin 2

void setup()
{
  SET_OUTPUT(INK_PINA);
  SET_OUTPUT(INK_PINB);
  SET_OUTPUT(INK_PINC);
  SET_OUTPUT(INK_PIND);
  SET_OUTPUT(INK_PULSE);

  //loop 20 times (to print "I <3 InkShield" 20 times)
  for(int i=0;i<20;i++){
    //loop through the array
    for(int i=0; i<fontSize; i++) {
      spray_ink(font[i]);
    }
  //wait so there is some room between prints
  delay(100);
  }
}


void loop()
{

}

void spray_ink(uint16_t strip)
{
  //loop through the nozzles
  for(uint8_t i = 0; i <= 11; i++){
    //See if nozzle is set to fire
    if(strip & 1<<i){

      //Write the nozzle number to the pin shield as 4 bits
      if(i & 1<<0) 
        WRITE(INK_PINA, 1);
      if(i & 1<<1)
        WRITE(INK_PINB, 1);
      if(i & 1<<2)
        WRITE(INK_PINC, 1);
      if(i & 1<<3)
        WRITE(INK_PIND, 1);

      //Fire the Nozzle
      WRITE(INK_PULSE, 1); 
      delayMicroseconds(5);

      //Set everything low  
      WRITE(INK_PULSE, 0);
      WRITE(INK_PINA, 0);
      WRITE(INK_PINB, 0);
      WRITE(INK_PINC, 0);
      WRITE(INK_PIND, 0);
    }
  }
  //wait to be sure we don't try to fire nozzles too fast and burn them out
  delayMicroseconds(800);
}


